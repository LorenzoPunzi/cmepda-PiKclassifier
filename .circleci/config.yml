# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: echo "Hello, World!"

  build-and-test:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - run:
          name: "Ciao"
          command: "echo HELLO WORLD"
      - run:
          name: "Conda Environment"
          command: ["/bin/sh", "-c"]
          args: ["conda config --set channel_priority strict && conda create -c conda-forge --name root-env root && conda activate root-env"]
      - python/install-packages:
          pkg-manager: conda
      - run:
          name: Run tests
          command: python -m unittest discover -s tests


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-test-workflow:
    jobs:
      - build-and-test
